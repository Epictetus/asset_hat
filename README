AssetHat
========
Your assets are covered.

* Minify CSS and JS with one command. (Can be done on deploy instead of
  at runtime.)
* Bundle CSS and JS to reduce HTTP requests.
* Reuse CSS and JS bundles across layouts without repetition.
* Bust cached image URLs in your CSS.
* Force image URLs in your CSS to use CDN subdomains, not just the current
  host.

(Tested with Rails 2.3.4)



Installation
------------

1. Install the gem: `gem install asset_hat`

2. Configure the gem:

  * Using [Bundler](http://github.com/wycats/bundler):

      1.  Add to your app's Gemfile: `gem 'asset_hat', '0.x.x'`

      2.  Command-line: `gem bundle`

  * Using Rails' `config.gem`, add to your app's `config/environment.rb`:

      `config.gem 'asset_hat', :version => '0.x.x'`

3. Add the tasks to your app's `Rakefile`:

        begin
          require 'asset_hat/tasks'
        rescue LoadError
          puts %q{Could not load AssetHat tasks: 'asset_hat' not found.}
        end



Configuration
-------------

1.  In your app, create `config/assets.yml` and set up your CSS/JS bundles. No
    `.css` or `.js` suffixes are needed. Here's an example:

        css:
          bundles:
            application:
              - reset
              - application
              - clearfix
            admin:
              - reset
              - admin
              - clearfix
        js:
          bundles:
            plugins:
              - init
              - third-party-plugin.min
                # The suffix `.min` indicates that the code has already
                # been minified, and should not be re-minified.
            common:
              - utilities
              - application

2.  Minify your bundles, which are written to `public/stylesheets/bundles/`
    and `public/javascripts/bundles/`:

      rake asset_hat:minify

    This will minify all of the CSS/JS files listed in `config/assets.yml`,
    and will concatenate the minified code into bundle files.



Usage
-----

In your layouts and views, instead of these:

    <%= stylesheet_link_tag 'reset', 'application', 'clearfix',
                            :media => 'screen,projection',
                            :cache => 'bundles/application' %>
    <%= javascript_include_tag 'plugin-1', 'plugin-2', 'plugin-3',
                               :cache => 'bundles/application' %>

**Use these:**

    <%= include_css :bundle => 'application' %>
    <%= include_js  :bundle => 'application' %>

These turn into:

    <link href="/stylesheets/bundles/application.min.css"
      media="screen,projection" rel="stylesheet" type="text/css" />
    <script src="/javascripts/bundles/application.min.js"
      type="text/javascript"></script>

If your environment has `config.action_controller.perform_caching` set to
`true` (e.g., production environments), the layout/view will include minified
bundle files. Otherwise, the separate, unminified files will be included.

### Advanced usage ###

You can also include single files as expected:

    <%= include_css 'reset', 'application' %>
    <%= include_js 'plugin.min', 'application' %>

Or include multiple bundles at once:

    <%= include_js :bundles => %w[plugins common] %>

When including multiple bundles at once, this yields one `<link>` or
`<script>` element per bundle.

You may want to use multiple bundles to separate plugins (rarely changed) from
application code (frequently changed). If all code is in one huge bundle, then
whenever there's a change, browsers have to re-download the whole bundle. By
having multiple bundles based on change frequency, browsers cache the rarely
changed code, and only re-download the frequently changed code.
